;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name loginform.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, b bouncer.core, bouncer.core bouncer.core, v bouncer.validators, bouncer.validators bouncer.validators}, :uses nil, :defs {prompt-message {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([message])), :doc "A Prompt that will animate to help the user with a given input"}, :name loginform.core/prompt-message, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 21, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message])), :doc "A Prompt that will animate to help the user with a given input"}, name-form {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 59, :column 7, :end-line 59, :end-column 16, :arglists (quote ([name-atom]))}, :name loginform.core/name-form, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 16, :method-params ([name-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name-atom]))}, password-form {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 67, :column 7, :end-line 67, :end-column 20, :arglists (quote ([password-atom]))}, :name loginform.core/password-form, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 20, :method-params ([password-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([password-atom]))}, input-and-prompt {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 25, :column 7, :end-line 25, :end-column 23, :arglists (quote ([label-value input-name input-type input-element-arg prompt-element required?])), :doc "Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message"}, :name loginform.core/input-and-prompt, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 23, :method-params ([label-value input-name input-type input-element-arg prompt-element required?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 6, :fn-var true, :arglists (quote ([label-value input-name input-type input-element-arg prompt-element required?])), :doc "Creates an input box and a prompt box that appears above the input when the input comes into focus. Also throws in a little required message"}, data {:name loginform.core/data, :file "src/cljs/loginform/core.cljs", :line 81, :column 1, :end-line 81, :end-column 10, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 81, :column 6, :end-line 81, :end-column 10}}, home-page {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 91, :column 7, :end-line 91, :end-column 16, :arglists (quote ([]))}, :name loginform.core/home-page, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, email-form {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([email-address-atom]))}, :name loginform.core/email-form, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 17, :method-params ([email-address-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([email-address-atom]))}, myvalidationz {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 87, :column 7, :end-line 87, :end-column 20, :arglists (quote ([y]))}, :name loginform.core/myvalidationz, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 20, :method-params ([y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([y]))}, input-element {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([id name type value in-focus])), :doc "An input element which updates its value and on focus parameters on change, blur, and focus"}, :name loginform.core/input-element, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 20, :method-params ([id name type value in-focus]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 5, :fn-var true, :arglists (quote ([id name type value in-focus])), :doc "An input element which updates its value and on focus parameters on change, blur, and focus"}, validationz {:protocol-inline nil, :meta {:file "/home/vinodh/vinodkumar/projects/loginform/src/cljs/loginform/core.cljs", :line 83, :column 7, :end-line 83, :end-column 18, :arglists (quote ([x]))}, :name loginform.core/validationz, :variadic false, :file "src/cljs/loginform/core.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core, v bouncer.validators, bouncer.validators bouncer.validators}, :cljs.analyzer/constants {:seen #{:on-focus :name :value :on-blur :type :div :div.container :label :id :class :h2 :email-address :form :input :on-change :p :required}, :order [:input :on-focus :name :value :on-blur :type :id :class :on-change :required :div :label :p :email-address :div.container :h2 :form]}, :doc nil}